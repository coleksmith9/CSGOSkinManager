package csgoskinmanager;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author smith_859800
 */
public class MainWindow extends javax.swing.JFrame {

	private static final File FILE_LOCATION = new File("URLMap.txt");
	private TreeMap<String, String> URLList;
	private String url;

	private InventoryGetter ig;
	private ArrayList<Weapon> inventory;

	private DefaultTableModel dtm;
	private static final String HEADERS[] = {"Weapon", "Name", "Float Value", "Rarity", "StatTrak?", "Stickers", "Screenshot"};

	public MainWindow() {
		initComponents();

		URLList = new TreeMap<>();
		setCurrentURL();

		ig = new InventoryGetter();
		inventory = ig.getInventory(url);

		updateTable();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table_Inventory = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        menu_File = new javax.swing.JMenu();
        menuItem_SteamURL = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table_Inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1","Title 2","Title 3","Title 4"
            }
        ));
        scrollPane.setViewportView(table_Inventory);

        menu_File.setText("File");

        menuItem_SteamURL.setText("Set Steam URL...");
        menuItem_SteamURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_SteamURLActionPerformed(evt);
            }
        });
        menu_File.add(menuItem_SteamURL);

        menuBar.add(menu_File);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItem_SteamURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_SteamURLActionPerformed
		setCurrentURL();
    }//GEN-LAST:event_menuItem_SteamURLActionPerformed

	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainWindow().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItem_SteamURL;
    private javax.swing.JMenu menu_File;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table_Inventory;
    // End of variables declaration//GEN-END:variables

	private void updateTable() {
		Object data[][] = new Object[inventory.size()][7];

		for (int i = 0; i < inventory.size(); i++) {
			Weapon weapon = inventory.get(i);

			data[i][0] = weapon.getWeaponType();
			data[i][1] = weapon.getName();
			data[i][2] = String.format("%.10f", weapon.getFloatValue());
			data[i][3] = weapon.getRarity();
			data[i][4] = weapon.isStattrak();
			data[i][5] = Arrays.toString(weapon.getStickers());
			data[i][6] = weapon.getScreenshot();
		}

		dtm = new DefaultTableModel(data, HEADERS) {
			@Override
			public boolean isCellEditable(int row, int column) {
				switch (column) {
					case 6:
						return true;
					default:
						return false;
				}
			}
		};

		table_Inventory.setModel((TableModel) dtm);
	}

	private void setCurrentURL() {
		/**
		 * Reads in the SteamIDs from the file. If there are any, it will ask
		 * the user to choose one, or choose add new ID. If there are none, it
		 * will just ask the user to enter a new ID.
		 */
		try {
			FileInputStream fis = new FileInputStream(FILE_LOCATION);
			ObjectInputStream ois = new ObjectInputStream(fis);

			// reads the object from the disk
			URLList = (TreeMap<String, String>) ois.readObject();

		} catch (FileNotFoundException ex) {
			System.out.println("Somehow the file wasn't found... It should be though, since it is a private static final variable that is instantiated on runtime... gl hf");
		} catch (IOException | ClassNotFoundException ex) {
			System.out.println("IO Exception or ClassNotFound exception... srry");
		}

		if (!URLList.isEmpty()) {
			// prompts the user to choose a stored URL
			String[] options = (String[]) URLList.values().toArray(new String[URLList.size()]);
			int chosenOption = JOptionPane.showOptionDialog(this, "Choose an inventory, or close this window to add a new SteamID", "", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

			// if the user chose an option, <url> will be set to that value
			if (chosenOption != JOptionPane.CLOSED_OPTION) {
				url = URLList.get(options[chosenOption]);
			} // otherwise, the user will be prompted to enter a new ID
			else {
				url = JOptionPane.showInputDialog(this, "Format as \"SteamID, Name\"", "Please input a new SteamID and name to add it to the system.", 3);
				if (url == null) {
					System.exit(0);
				}

				try {
					Scanner choppa = new Scanner(url);
					choppa.useDelimiter(", ");
					String SteamID = choppa.next();
					String name = choppa.next();
					URLList.put(url, name);
				} catch (NoSuchElementException ex) {
					System.out.println("Misformatted input. Please try again. Be sure to enter it as \"SteamID, Name\".");
					setCurrentURL();
				}
			}
		} else {
			url = JOptionPane.showInputDialog(this, "Format as \"SteamID\", \"Name\"", "Please input a new SteamID and name to add it to the system.", 3);
			if (url == null) {
				System.exit(0);
			}

			try {
				Scanner choppa = new Scanner(url);
				choppa.useDelimiter(", ");
				String SteamID = choppa.next();
				String name = choppa.next();
				URLList.put(url, name);
			} catch (NoSuchElementException ex) {
				System.out.println("Misformatted input. Please try again. Be sure to enter it as \"SteamID, Name\".");
				setCurrentURL();
			}
		}
		writeURLListToDisk();
	}

	private void writeURLListToDisk() {
		try {
			try (FileOutputStream fos = new FileOutputStream(FILE_LOCATION); ObjectOutputStream oos = new ObjectOutputStream(fos)) {
				// writes the object to the disk
				oos.writeObject(URLList);
			}
		} catch (FileNotFoundException ex) {
			System.out.println("Somehow the file wasn't found... It should be though, since it is a private static final variable that is instantiated on runtime... gl hf");
		} catch (IOException ex) {
			System.out.println("IO Exception. I don't really know anything about that, but good luck <3 :*");
		}
	}
}
